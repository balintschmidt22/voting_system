@page "/votes/add"
@using VotingSystem.Blazor.WebAssembly.Config
@using VotingSystem.Blazor.WebAssembly.Services
@using VotingSystem.Blazor.WebAssembly.ViewModels
@inject NavigationManager NavigationManager
@inject IVoteService VoteService
@inject AppConfig AppConfig


<h1>Create new Vote</h1>

<EditForm Model="_vote" OnValidSubmit="SaveVoteAsync">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label for="question" class="form-label">Question:</label>
        <InputText id="question" @bind-Value="_vote.Question" class="form-control" />
        <ValidationMessage For="@(() => _vote.Question)" class="text-danger" />
    </div>

    <div class="mb-3">
        <label for="options" class="form-label">Options (separated by ";"):</label>
        <InputTextArea id="options" @bind-Value="_vote.OptionsRaw" class="form-control" rows="3" />
        <ValidationMessage For="@(() => _vote.OptionsRaw)" class="text-danger" />
    </div>

    <div class="mb-3">
        <label for="start" class="form-label">Start:</label>
        <InputDate id="start" @bind-Value="_vote.Start" class="form-control" />
        <ValidationMessage For="@(() => _vote.Start)" class="text-danger" />
    </div>

    <div class="mb-3">
        <label for="end" class="form-label">End:</label>
        <InputDate id="end" @bind-Value="_vote.End" class="form-control" />
        <ValidationMessage For="@(() => _vote.End)" class="text-danger" />
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>


@code {
    private readonly VoteViewModel _vote = new();

    private async Task SaveVoteAsync()
    {
        if (_vote.Options.Length < 2)
        {
            return;
        }
        await VoteService.CreateVoteAsync(_vote);
        NavigationManager.NavigateTo("/votes");
    }
}